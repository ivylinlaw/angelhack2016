<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="Content-Type" content="text/html; charset=utf-8">
    
    <meta name="viewport" content="initial-scale=1, maximum-scale=1,user-scalable=no">
    <title>Better Route</title>

    <link rel="stylesheet" href="https://js.arcgis.com/3.16/dijit/themes/claro/claro.css">
    <link rel="stylesheet" href="https://js.arcgis.com/3.16/esri/css/esri.css">
    <link rel="stylesheet" href="style.css" />
    
    <script type="text/javascript">
      var dojoConfig = {
          parseOnLoad: true
      };
    </script>
    <script src="https://js.arcgis.com/3.16/"></script>
    <script>
      require([
        "esri/urlUtils",
        "esri/config",
        "esri/map",
        "esri/graphic",            
        "esri/tasks/RouteTask",            
        "esri/tasks/RouteParameters",
        "esri/tasks/FeatureSet",            
        "esri/symbols/SimpleMarkerSymbol",
        "esri/symbols/SimpleLineSymbol",  
        "esri/Color",
        "dojo/_base/array",
        "dojo/on",
        "dojo/dom",
        "dijit/registry",
        "esri/tasks/geometry",
        "esri/units",
        "dijit/layout/BorderContainer",
        "dijit/layout/ContentPane",
        "dijit/form/HorizontalSlider",
        "dijit/form/HorizontalRuleLabels"
      ], function (
        urlUtils, esriConfig, Map, Graphic, RouteTask, RouteParameters,
        FeatureSet, SimpleMarkerSymbol, SimpleLineSymbol,           
        Color, array, on, dom, registry
      ) {
        var map, routeTask, routeParams, routes = [];
        var stopSymbol, barrierSymbol, routeSymbols, polygonBarrierSymbol;
        var mapOnClick_addStops_connect, mapOnClick_addBarriers_connect, mapOnClick_addPolygonBarriers_connect;
        // urlUtils.addProxyRule({
        //   urlPrefix: "route.arcgis.com",  
        //   proxyUrl: "/sproxy/"
        // });
        
        map = new Map("map", {
          basemap: "streets",
          center: [-118.457186, 34.0298551],
          zoom: 17
        });
        routeTask = new RouteTask("https://route.arcgis.com/arcgis/rest/services/World/Route/NAServer/Route_World");
        routeParams = new RouteParameters();
        routeParams.stops = new FeatureSet();
        routeParams.barriers = new FeatureSet();
        routeParams.polygonBarriers = new esri.tasks.FeatureSet();
        polygonBarrierSymbol = new esri.symbol.SimpleFillSymbol();
        routeParams.outSpatialReference = {"wkid":102100};
        //dojo.ready(function() { routeTask.on("solve-complete", showRoute); });
        routeTask.on("solve-complete", showRoute);
        routeTask.on("error", errorHandler);
                
        stopSymbol = new SimpleMarkerSymbol().setStyle(SimpleMarkerSymbol.STYLE_CROSS).setSize(15);
        stopSymbol.outline.setWidth(3);
        barrierSymbol = new SimpleMarkerSymbol().setStyle(SimpleMarkerSymbol.STYLE_X).setSize(10);
        barrierSymbol.outline.setWidth(3).setColor(new Color([255,0,0]));
        routeSymbols = {
          "Route 1": new SimpleLineSymbol().setColor(new Color([0,0,255,0.5])).setWidth(5),
          "Route 2": new SimpleLineSymbol().setColor(new Color([0,255,0,0.5])).setWidth(5),
          "Route 3": new SimpleLineSymbol().setColor(new Color([255,0,255,0.5])).setWidth(5)
        };
                        
        //button click event listeners can't be added directly in HTML when the code is wrapped in an AMD callback
        on(dom.byId("addStopsBtn"), "click", addStops);
        on(dom.byId("clearStopsBtn"), "click", clearStops);
        on(dom.byId("addBarriersBtn"), "click", addBarriers);
        on(dom.byId("clearBarriersBtn"), "click", clearBarriers);
        on(dom.byId("solveRoutesBtn"), "click", solveRoute);
        on(dom.byId("clearRoutesBtn"), "click", clearRoutes);
      
        //Begins listening for click events to add stops
        function addStops() {
          removeEventHandlers();
          mapOnClick_addStops_connect = map.on("click", addStop);
        }
        //Clears all stops
        function clearStops() {
          removeEventHandlers();
          for (var i=routeParams.stops.features.length-1; i>=0; i--) {
            map.graphics.remove(routeParams.stops.features.splice(i, 1)[0]);
          }
        }
        //Adds a stop. The stop is associated with the route currently displayed in the dropdown
        function addStop(evt) {
          routeParams.stops.features.push(
            map.graphics.add(
              new esri.Graphic(
                esolveRoutevt.mapPoint,
                stopSymbol,
                { RouteName:dom.byId("routeName").value }
              )
            )
          );
          //
          console.log("addStop", evt.mapPoint);
        }
        //Begins listening for click events to add barriers
        function addBarriers() {
          removeEventHandlers();
          mapOnClick_addBarriers_connect = on(map, "click", addBarrier);
        }
        //Clears all barriers
        function clearBarriers() {
          removeEventHandlers();
          for (var i=routeParams.barriers.features.length-1; i>=0; i--) {
            map.graphics.remove(routeParams.barriers.features.splice(i, 1)[0]);
          }
        }
        //Adds a barrier
        function addBarrier(evt) {
          routeParams.barriers.features.push(
            map.graphics.add(
              new esri.Graphic(
                evt.mapPoint,
                barrierSymbol
              )
            )
          );
          //
          console.log("addBarrier", evt.mapPoint);
        }
        //Load-in barrier circle(polygon)
        function addCircleBarrier(long, lat, severity) {
          //op as opacity, radius as radius
          var op, radius;
          if(severity == 1) {
            op = 0.1;
            radius = 0.0006;
          }
          else if(severity == 2) {
            op = 0.25;
            radius = 0.002;
          }
          else {
            op = 0.5;
            radius = 0.004;
          }
          //Change circle color
          polygonBarrierSymbol.setColor(new Color([0,0,255,op]));
          //Change circle outline
          polygonBarrierSymbol.setOutline(
            new SimpleLineSymbol(esri.symbol.SimpleLineSymbol.STYLE_SOLID, new Color([255,255,255,0]), 2));
          var center = new esri.geometry.Point([long, lat]);
          var ring = []; // point that make up the circle
          var pts = 40; // number of points on the circle
          var angle = 360 / pts; // used to compute points on the circle
          for(var i = 1; i <= pts; i++) {
            // convert angle to raidans
            var radians = i * angle * Math.PI / 180;
            // add point to the circle
            ring.push([center.x + radius * Math.cos(radians), center.y + radius * Math.sin(radians)]);
            
            //
            console.log("x", center.x + radius * Math.cos(radians));
            console.log("y", center.y + radius * Math.sin(radians));
          } 
          ring.push(ring[0]); // start point needs to == end point
          var circle = new esri.geometry.Polygon(ring);
          routeParams.polygonBarriers.features.push(  
              map.graphics.add(
                new esri.Graphic(
                  circle,
                  polygonBarrierSymbol)
                )  
            );
        }
        //Remove all circle(polygon) barriers
        function clearCircleBarrier() {
          removeEventHandlers();
          for (var i=routeParams.polygonBarriers.features.length-1; i>=0; i--) {
            map.graphics.remove(routeParams.polygonBarriers.features.splice(i, 1)[0]);
          }
        }
        //Stops listening for click events to add barriers and stops (if they've already been wired)
        function removeEventHandlers() {        
          if (mapOnClick_addStops_connect) {
            mapOnClick_addStops_connect.remove();
          }
          if (mapOnClick_addBarriers_connect) {
            mapOnClick_addBarriers_connect.remove();
          }
          if (mapOnClick_addPolygonBarriers_connect) {
            mapOnClick_addPolygonBarriers_connect.remove();
          }
        }
        //Solves the routes. Any errors will trigger the errorHandler function.
        function solveRoute() {
          //Make sure data is ready?
          //dojo.ready(function() {
            removeEventHandlers();
            routeTask.solve(routeParams);
          //});
        }
        //Clears all routes
        function clearRoutes() {
          for (var i=routes.length-1; i>=0; i--) {
            map.graphics.remove(routes.splice(i, 1)[0]);
          }
          routes = [];
        }
        //Draws the resulting routes on the map
        function showRoute(evt) {
          //Make sure data is ready?
          //dojo.ready(function() {
            clearRoutes();
            array.forEach(evt.result.routeResults, function(routeResult, i) {
              routes.push(
                map.graphics.add(
                  routeResult.route.setSymbol(routeSymbols[routeResult.routeName])
                )
              );
            });
            
            var msgs = ["Server messages:"];
            array.forEach(evt.result.messages, function(message) {
              msgs.push(message.type + " : " + message.description);
            });
            if (msgs.length > 1) {
              alert(msgs.join("\n - "));
            }
          //});
        }
        //Reports any errors that occurred during the solve
        function errorHandler(err) {
          alert("An error occured\n" + err.message + "\n" + err.details.join("\n"));
        }
        // Create barriers
        map.on("load", function() {
          // Create street lights
          var featureLayer = new esri.layers.FeatureLayer("http://services1.arcgis.com/p84PN4WZvOWzi2j2/arcgis/rest/services/StreetLights/FeatureServer/0",{
            mode: esri.layers.FeatureLayer.MODE_ONDEMAND,
            outFields: ["*"]
          });
          map.addLayer(featureLayer);
          //Load-in barrier point
          var pt = new esri.geometry.Point(-118.457186, 34.0298551);
          routeParams.barriers.features.push(
              map.graphics.add(
                new esri.Graphic(
                  pt,
                  barrierSymbol
                )
              )
            );
          // var polygon = new esri.geometry.Polygon([
          //   [[-118.457186,34.0298551],[-118.48,34.0298551],[-118.48,34.035],[-118.457186,34.0298551]]]);
          // routeParams.polygonBarriers.features.push(  
          //     map.graphics.add(
          //       new esri.Graphic(
          //         polygon,
          //         polygonBarrierSymbol)
          //       )  
          //   );
          
        });
        //***Test draw circle(polygon)***
        map.on("load", function() {
          // addCircleBarrier(-118.457186, 34.0298551, 1);
          addCircleBarrier(-118.457186, 34.0298551, 2);
          // addCircleBarrier(-118.457186, 34.0298551, 3);
        });
      });
    </script>

  </head>
  <body class="claro">

  <div id="safefast"> Select Route Setting <select id="routeName">
    <option value="Route 1">Safe</option>
    <option value="Route 2">Balanced</option>
    <option value="Route 3">Fast</option>
  </select></div>
  <div id="routecreation">
        <button id="addStopsBtn">Add Stops</button>
        <button id="clearStopsBtn">Clear Stops</button>
        <button id="addBarriersBtn">Add Barriers</button>
        <button id="clearBarriersBtn">Clear Barriers</button>
        <button id="solveRoutesBtn">Solve Routes</button>
        <button id="clearRoutesBtn">Clear Routes</button>
     </div>
  <div id="centerpage">
    <div id="map" style="width:600px; height:400px; border:1px solid #000;"></div>
    <form id="extrasettings">
      <p>Choose display for Crime Data</p>
      <input type="radio" id="bufferzone" checked> Buffer Zone<br>
      <input type="radio" id="icons" unchecked> Icons<br><br>
      <input type="checkbox" checked="checked" id="streetlights">Display Street Lights?<br>
      </form>
  </div>
  <div id="erroralert">
    <p>Any server error messages will be displayed in an alert box.</p>
    </div>
  </body>
</html>